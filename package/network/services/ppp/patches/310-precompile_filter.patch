pppd: Implement support for precompiled pcap filters

This patch implements support for precompiled pcap filters which is useful to
support dial-on-demand on memory constrained embedded devices without having
to link the full libpcap into pppd to generate the filters during runtime.

Two new options are introduced; "precompiled-pass-filter" specifies a pre-
compiled filter file containing rules to match packets which should be passed,
"precompiled-active-filter" specifies a filter file containing rules to match
packets which are treated as active.

Signed-off-by: Jo-Philipp Wich <jo@mein.io>

<<<<<<< HEAD
--- a/configure.ac
+++ b/configure.ac
@@ -306,6 +306,9 @@ AM_CONDITIONAL(PPP_WITH_PAM, test "x${wi
 # With libpcap support, activate pppd on network activity
 AX_CHECK_PCAP
 
+# internal statically linked pcap
+AM_CONDITIONAL(PPP_WITH_PRECOMPILED_FILTER, test "x${with_static_pcap}" = "xyes")
+
 #
 # SunOS provides a version of libpcap that would work, but SunOS has no support for activity filter
 AM_CONDITIONAL([PPP_WITH_FILTER], [ test "x${with_pcap}" = "xyes" && test "x${build_sunos}" != "xyes" ])
@@ -348,6 +351,7 @@ $PACKAGE_NAME version $PACKAGE_VERSION
     With libatm..........: ${with_atm:-no}
     With libpam..........: ${with_pam:-no}
     With libpcap.........: ${with_pcap:-no}
+    With static libpcap..: ${with_static_pcap:-no}
     With libsrp..........: ${with_srp:-no}
     C Compiler...........: $CC $CFLAGS
     Linker...............: $LD $LDFLAGS $LIBS
--- a/pppd/Makefile.am
+++ b/pppd/Makefile.am
@@ -137,6 +137,12 @@ pppd_LDFLAGS += $(PCAP_LDFLAGS)
 pppd_LIBS += $(PCAP_LIBS)
 endif
 
+if PPP_WITH_PRECOMPILED_FILTER
+pppd_SOURCES += pcap_pcc.c
+pppd_include_HEADERS += pcap_pcc.h
+pppd_LIBS += $(STAGING_DIR)/usr/lib/libpcap.a
+endif
+
 if PPP_WITH_PLUGINS
 pppd_CPPFLAGS += -DPPPD_PLUGIN_DIR='"@PPPD_PLUGIN_DIR@"'
 pppd_LIBS += -ldl
--- a/pppd/options.c
+++ b/pppd/options.c
@@ -62,6 +62,7 @@
 
 #ifdef PPP_WITH_FILTER
=======
--- a/pppd/Makefile.linux
+++ b/pppd/Makefile.linux
@@ -50,6 +50,9 @@ MPPE=y
 # and that the kernel driver support PPP packet filtering.
 #FILTER=y
 
+# Support for precompiled filters
+PRECOMPILED_FILTER=y
+
 # Uncomment the next line to enable multilink PPP (enabled by default)
 # Linux distributions: Please leave multilink ENABLED in your builds
 # of pppd!
@@ -195,6 +198,14 @@ CFLAGS  += -DPPP_FILTER -I$(STAGING_DIR)
 endif
 endif
 
+ifdef PRECOMPILED_FILTER
+PPPDSRCS += pcap_pcc.c
+HEADERS  += pcap_pcc.h
+PPPDOBJS += pcap_pcc.o
+LIBS	+= $(STAGING_DIR)/usr/lib/libpcap.a
+CFLAGS	+= -DPPP_FILTER -DPPP_PRECOMPILED_FILTER -I$(STAGING_DIR)/usr/include
+endif
+
 ifdef HAVE_INET6
      PPPDSRCS += ipv6cp.c eui64.c
      HEADERS  += ipv6cp.h eui64.h
--- a/pppd/options.c
+++ b/pppd/options.c
@@ -57,6 +57,7 @@
 
 #ifdef PPP_FILTER
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
 #include <pcap.h>
+#include <pcap-bpf.h>
 /*
  * There have been 3 or 4 different names for this in libpcap CVS, but
  * this seems to be what they have settled on...
<<<<<<< HEAD
@@ -182,6 +183,13 @@ static int setlogfile(char **);
 static int loadplugin(char **);
 #endif
 
+#ifdef PPP_WITH_PRECOMPILED_FILTER
+#include "pcap_pcc.h"
+static int setprecompiledpassfilter(char **);
+static int setprecompiledactivefilter(char **);
+#undef PPP_WITH_FILTER
+#endif
+
 #ifdef PPP_WITH_FILTER
 static int setpassfilter(char **);
 static int setactivefilter(char **);
@@ -391,6 +399,14 @@ struct option general_options[] = {
       "set filter for active pkts", OPT_PRIO },
 #endif
 
+#ifdef PPP_WITH_PRECOMPILED_FILTER
=======
@@ -169,6 +170,13 @@ static int setlogfile __P((char **));
 static int loadplugin __P((char **));
 #endif
 
+#ifdef PPP_PRECOMPILED_FILTER
+#include "pcap_pcc.h"
+static int setprecompiledpassfilter __P((char **));
+static int setprecompiledactivefilter __P((char **));
+#undef PPP_FILTER
+#endif
+
 #ifdef PPP_FILTER
 static int setpassfilter __P((char **));
 static int setactivefilter __P((char **));
@@ -361,6 +369,14 @@ option_t general_options[] = {
       "set filter for active pkts", OPT_PRIO },
 #endif
 
+#ifdef PPP_PRECOMPILED_FILTER
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+    { "precompiled-pass-filter", 1, setprecompiledpassfilter,
+      "set precompiled filter for packets to pass", OPT_PRIO },
+
+    { "precompiled-active-filter", 1, setprecompiledactivefilter,
+      "set precompiled filter for active pkts", OPT_PRIO },
+#endif
+
<<<<<<< HEAD
     { "maxoctets", o_int, &maxoctets,
       "Set connection traffic limit",
       OPT_PRIO | OPT_LLIMIT | OPT_NOINCR | OPT_ZEROINF },
@@ -1666,6 +1682,27 @@ callfile(char **argv)
     return ok;
 }
 
+#ifdef PPP_WITH_PRECOMPILED_FILTER
=======
 #ifdef MAXOCTETS
     { "maxoctets", o_int, &maxoctets,
       "Set connection traffic limit",
@@ -1516,6 +1532,29 @@ callfile(argv)
     return ok;
 }
 
+#ifdef PPP_PRECOMPILED_FILTER
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+/*
+ * setprecompiledpassfilter - Set the pass filter for packets using a
+ * precompiled expression
+ */
+static int
<<<<<<< HEAD
+setprecompiledpassfilter(char **argv)
=======
+setprecompiledpassfilter(argv)
+    char **argv;
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+{
+    return pcap_pre_compiled (*argv, &pass_filter);
+}
+
+/*
+ * setactivefilter - Set the active filter for packets
+ */
+static int
<<<<<<< HEAD
+setprecompiledactivefilter(char **argv)
=======
+setprecompiledactivefilter(argv)
+    char **argv;
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+{
+    return pcap_pre_compiled (*argv, &active_filter);
+}
+#endif
+
<<<<<<< HEAD
 #ifdef PPP_WITH_FILTER
=======
 #ifdef PPP_FILTER
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
 /*
  * setpassfilter - Set the pass filter for packets
--- /dev/null
+++ b/pppd/pcap_pcc.c
<<<<<<< HEAD
@@ -0,0 +1,75 @@
=======
@@ -0,0 +1,74 @@
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+#include <pcap.h>
+#include <pcap-bpf.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
<<<<<<< HEAD
+#include "options.h"
=======
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+#include "pppd.h"
+
+int pcap_pre_compiled (char * fname, struct bpf_program *p)
+{
+    char buf[128];
+    int line = 0, size = 0, index=0, ret=1;
+    FILE *f = fopen (fname, "r");
+    if (!f)
+    {
<<<<<<< HEAD
+       ppp_option_error("error opening precompiled active-filter '%s': %s",
=======
+       option_error("error opening precompiled active-filter '%s': %s",
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+                    fname, strerror (errno));
+       return 0;
+    }
+    while (fgets (buf, 127, f))
+    {
+       line++;
+       if (*buf == '#')
+           continue;
+       if (size)
+       {
+           /*
+             struct bpf_insn {
+             u_short   code;
+             u_char    jt;
+             u_char    jf;
+             bpf_int32 k;
+             }
+           */
+           struct bpf_insn * insn = & p->bf_insns[index];
+           unsigned code, jt, jf, k;
+           if (sscanf (buf, "%u %u %u %u", &code, &jt, &jf, &k) != 4)
+           {
+               goto err;
+           }
+           insn->code = code;
+           insn->jt = jt;
+           insn->jf = jf;
+           insn->k  = k;
+           index++;
+       }
+       else
+       {
+           if (sscanf (buf, "%u", &size) != 1)
+           {
+               goto err;
+           }
+           p->bf_len = size;
+           p->bf_insns = (struct bpf_insn *) 
+               malloc (size * sizeof (struct bpf_insn));
+       }
+    } 
+    if (size != index)
+    {
<<<<<<< HEAD
+       ppp_option_error("error in precompiled active-filter,"
+                        " expected %d expressions, got %dn",
+                        size, index);
=======
+       option_error("error in precompiled active-filter,"
+                    " expected %d expressions, got %dn",
+                    size, index);
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+       ret = 0;
+    }
+    fclose(f);
+    return ret;
+
+err:
<<<<<<< HEAD
+  ppp_option_error("error in precompiled active-filter"
+                   " expression line %s:%d (wrong size)\n",
+                   fname, line);
=======
+  option_error("error in precompiled active-filter"
+              " expression line %s:%d (wrong size)\n", 
+              fname, line);
>>>>>>> 712839d4c6 (Removed unwanted submodules from index)
+  fclose (f);
+  return 0;
+}
--- /dev/null
+++ b/pppd/pcap_pcc.h
@@ -0,0 +1,7 @@
+#ifndef PCAP_PCC_H
+#define PCAP_PCC_H
+
+#include <pcap.h>
+
+int pcap_pre_compiled (char * fname, struct bpf_program *p);
+#endif /* PCAP_PCC_H */
